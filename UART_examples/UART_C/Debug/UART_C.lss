
UART_C.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000e  00800100  00000382  00000416  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000382  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  0080010e  0080010e  00000424  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000424  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000454  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000088  00000000  00000000  00000494  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000111c  00000000  00000000  0000051c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a4d  00000000  00000000  00001638  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000006fe  00000000  00000000  00002085  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000110  00000000  00000000  00002784  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004ce  00000000  00000000  00002894  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000790  00000000  00000000  00002d62  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000058  00000000  00000000  000034f2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	0c c1       	rjmp	.+536    	; 0x292 <__vector_30>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e2 e8       	ldi	r30, 0x82	; 130
  a0:	f3 e0       	ldi	r31, 0x03	; 3
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	ae 30       	cpi	r26, 0x0E	; 14
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	ae e0       	ldi	r26, 0x0E	; 14
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a0 31       	cpi	r26, 0x10	; 16
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	24 d1       	rcall	.+584    	; 0x30c <main>
  c4:	5c c1       	rjmp	.+696    	; 0x37e <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <data_LCD>:
#include "LCD_lib.h"

void data_LCD(unsigned char data){
	// set PA0 and PA1 as output
	DDRA |= 0x03;
  c8:	9a b3       	in	r25, 0x1a	; 26
  ca:	93 60       	ori	r25, 0x03	; 3
  cc:	9a bb       	out	0x1a, r25	; 26
	// E=1, RS=1
	//PORTA &= 0xFC;
	PORTA |= 0x03;
  ce:	9b b3       	in	r25, 0x1b	; 27
  d0:	93 60       	ori	r25, 0x03	; 3
  d2:	9b bb       	out	0x1b, r25	; 27

	// set PC0-PC7 as lines for command
	DDRC = 0xFF;
  d4:	9f ef       	ldi	r25, 0xFF	; 255
  d6:	94 bb       	out	0x14, r25	; 20
	PORTC = data;
  d8:	85 bb       	out	0x15, r24	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  da:	8f ef       	ldi	r24, 0xFF	; 255
  dc:	97 e4       	ldi	r25, 0x47	; 71
  de:	01 97       	sbiw	r24, 0x01	; 1
  e0:	f1 f7       	brne	.-4      	; 0xde <data_LCD+0x16>
  e2:	00 c0       	rjmp	.+0      	; 0xe4 <data_LCD+0x1c>
  e4:	00 00       	nop
	_delay_ms(10);

	// down E
	PORTA &= 0xFE;
  e6:	8b b3       	in	r24, 0x1b	; 27
  e8:	8e 7f       	andi	r24, 0xFE	; 254
  ea:	8b bb       	out	0x1b, r24	; 27
  ec:	8f ef       	ldi	r24, 0xFF	; 255
  ee:	97 e4       	ldi	r25, 0x47	; 71
  f0:	01 97       	sbiw	r24, 0x01	; 1
  f2:	f1 f7       	brne	.-4      	; 0xf0 <data_LCD+0x28>
  f4:	00 c0       	rjmp	.+0      	; 0xf6 <data_LCD+0x2e>
  f6:	00 00       	nop
  f8:	08 95       	ret

000000fa <command_LCD>:

}

void command_LCD(unsigned char command){
	// set PA0 and PA1 as output
	DDRA |= 0x03;
  fa:	9a b3       	in	r25, 0x1a	; 26
  fc:	93 60       	ori	r25, 0x03	; 3
  fe:	9a bb       	out	0x1a, r25	; 26
	// E=1, RS=0
	//PORTA &= 0xFC;
	PORTA |= 0x01;
 100:	9b b3       	in	r25, 0x1b	; 27
 102:	91 60       	ori	r25, 0x01	; 1
 104:	9b bb       	out	0x1b, r25	; 27
	PORTA &= 0xFD; 
 106:	9b b3       	in	r25, 0x1b	; 27
 108:	9d 7f       	andi	r25, 0xFD	; 253
 10a:	9b bb       	out	0x1b, r25	; 27
	
	// set PC0-PC7 as lines for command
	DDRC = 0xFF;
 10c:	9f ef       	ldi	r25, 0xFF	; 255
 10e:	94 bb       	out	0x14, r25	; 20
	PORTC = command;
 110:	85 bb       	out	0x15, r24	; 21
 112:	8f ef       	ldi	r24, 0xFF	; 255
 114:	97 e4       	ldi	r25, 0x47	; 71
 116:	01 97       	sbiw	r24, 0x01	; 1
 118:	f1 f7       	brne	.-4      	; 0x116 <command_LCD+0x1c>
 11a:	00 c0       	rjmp	.+0      	; 0x11c <command_LCD+0x22>
 11c:	00 00       	nop
	_delay_ms(10);
	
	// down E
	PORTA &= 0xFC;
 11e:	8b b3       	in	r24, 0x1b	; 27
 120:	8c 7f       	andi	r24, 0xFC	; 252
 122:	8b bb       	out	0x1b, r24	; 27
 124:	8f ef       	ldi	r24, 0xFF	; 255
 126:	97 e4       	ldi	r25, 0x47	; 71
 128:	01 97       	sbiw	r24, 0x01	; 1
 12a:	f1 f7       	brne	.-4      	; 0x128 <command_LCD+0x2e>
 12c:	00 c0       	rjmp	.+0      	; 0x12e <command_LCD+0x34>
 12e:	00 00       	nop
 130:	08 95       	ret

00000132 <init_LCD>:
	// wait
	_delay_ms(10);
}

void init_LCD(void){
 132:	1f 93       	push	r17
 134:	cf 93       	push	r28
 136:	df 93       	push	r29
 138:	cd b7       	in	r28, 0x3d	; 61
 13a:	de b7       	in	r29, 0x3e	; 62
 13c:	28 97       	sbiw	r28, 0x08	; 8
 13e:	0f b6       	in	r0, 0x3f	; 63
 140:	f8 94       	cli
 142:	de bf       	out	0x3e, r29	; 62
 144:	0f be       	out	0x3f, r0	; 63
 146:	cd bf       	out	0x3d, r28	; 61
 148:	2f ef       	ldi	r18, 0xFF	; 255
 14a:	8f ef       	ldi	r24, 0xFF	; 255
 14c:	9c e2       	ldi	r25, 0x2C	; 44
 14e:	21 50       	subi	r18, 0x01	; 1
 150:	80 40       	sbci	r24, 0x00	; 0
 152:	90 40       	sbci	r25, 0x00	; 0
 154:	e1 f7       	brne	.-8      	; 0x14e <init_LCD+0x1c>
 156:	00 c0       	rjmp	.+0      	; 0x158 <init_LCD+0x26>
 158:	00 00       	nop
	
	_delay_ms(2000);
	// Function set
	command_LCD(FUNC_SET);
 15a:	84 e3       	ldi	r24, 0x34	; 52
 15c:	ce df       	rcall	.-100    	; 0xfa <command_LCD>
 15e:	8f ef       	ldi	r24, 0xFF	; 255
 160:	97 e4       	ldi	r25, 0x47	; 71
 162:	01 97       	sbiw	r24, 0x01	; 1
 164:	f1 f7       	brne	.-4      	; 0x162 <init_LCD+0x30>
 166:	00 c0       	rjmp	.+0      	; 0x168 <init_LCD+0x36>
 168:	00 00       	nop
	_delay_ms(10);

	// Entry mode set
	command_LCD(ENTRY_MODE_SET);
 16a:	86 e0       	ldi	r24, 0x06	; 6
 16c:	c6 df       	rcall	.-116    	; 0xfa <command_LCD>
 16e:	8f ef       	ldi	r24, 0xFF	; 255
 170:	97 e4       	ldi	r25, 0x47	; 71
 172:	01 97       	sbiw	r24, 0x01	; 1
 174:	f1 f7       	brne	.-4      	; 0x172 <init_LCD+0x40>
 176:	00 c0       	rjmp	.+0      	; 0x178 <init_LCD+0x46>
	_delay_ms(10);
	
	// cursor and display shift disabled
	command_LCD(CURS_DISP_SHIFT);
 178:	00 00       	nop
 17a:	80 e0       	ldi	r24, 0x00	; 0
 17c:	be df       	rcall	.-132    	; 0xfa <command_LCD>
 17e:	8f ef       	ldi	r24, 0xFF	; 255
 180:	97 e4       	ldi	r25, 0x47	; 71
 182:	01 97       	sbiw	r24, 0x01	; 1
 184:	f1 f7       	brne	.-4      	; 0x182 <init_LCD+0x50>
 186:	00 c0       	rjmp	.+0      	; 0x188 <init_LCD+0x56>
	_delay_ms(10);
	
	command_LCD(SET_DDRAM_ADDR);
 188:	00 00       	nop
 18a:	80 e8       	ldi	r24, 0x80	; 128
 18c:	b6 df       	rcall	.-148    	; 0xfa <command_LCD>
 18e:	8f ef       	ldi	r24, 0xFF	; 255
 190:	97 e4       	ldi	r25, 0x47	; 71
 192:	01 97       	sbiw	r24, 0x01	; 1
 194:	f1 f7       	brne	.-4      	; 0x192 <init_LCD+0x60>
 196:	00 c0       	rjmp	.+0      	; 0x198 <init_LCD+0x66>
 198:	00 00       	nop
	_delay_ms(10);
	
char init_LCD_data[] = {' ', ' ', ':', ' ', ' ', ':', ' ', ' '};
 19a:	88 e0       	ldi	r24, 0x08	; 8
 19c:	e6 e0       	ldi	r30, 0x06	; 6
 19e:	f1 e0       	ldi	r31, 0x01	; 1
 1a0:	de 01       	movw	r26, r28
 1a2:	11 96       	adiw	r26, 0x01	; 1
 1a4:	01 90       	ld	r0, Z+
 1a6:	0d 92       	st	X+, r0
 1a8:	8a 95       	dec	r24
 1aa:	e1 f7       	brne	.-8      	; 0x1a4 <init_LCD+0x72>
							
	
	unsigned char i;
	for(i = 0; i < 8; i++)
 1ac:	10 e0       	ldi	r17, 0x00	; 0
 1ae:	0f c0       	rjmp	.+30     	; 0x1ce <init_LCD+0x9c>
	{
		data_LCD(init_LCD_data[i]);
 1b0:	e1 e0       	ldi	r30, 0x01	; 1
 1b2:	f0 e0       	ldi	r31, 0x00	; 0
 1b4:	ec 0f       	add	r30, r28
 1b6:	fd 1f       	adc	r31, r29
 1b8:	e1 0f       	add	r30, r17
 1ba:	f1 1d       	adc	r31, r1
 1bc:	80 81       	ld	r24, Z
 1be:	84 df       	rcall	.-248    	; 0xc8 <data_LCD>
 1c0:	8f ef       	ldi	r24, 0xFF	; 255
 1c2:	97 e4       	ldi	r25, 0x47	; 71
 1c4:	01 97       	sbiw	r24, 0x01	; 1
 1c6:	f1 f7       	brne	.-4      	; 0x1c4 <init_LCD+0x92>
 1c8:	00 c0       	rjmp	.+0      	; 0x1ca <init_LCD+0x98>
	
char init_LCD_data[] = {' ', ' ', ':', ' ', ' ', ':', ' ', ' '};
							
	
	unsigned char i;
	for(i = 0; i < 8; i++)
 1ca:	00 00       	nop
 1cc:	1f 5f       	subi	r17, 0xFF	; 255
 1ce:	18 30       	cpi	r17, 0x08	; 8
		data_LCD(init_LCD_data[i]);
		_delay_ms(10);
	}
		
	// Display ON/OFF control
	command_LCD(DISP_ON_OFF);
 1d0:	78 f3       	brcs	.-34     	; 0x1b0 <init_LCD+0x7e>
 1d2:	8c e0       	ldi	r24, 0x0C	; 12
 1d4:	92 df       	rcall	.-220    	; 0xfa <command_LCD>
 1d6:	8f ef       	ldi	r24, 0xFF	; 255
 1d8:	97 e4       	ldi	r25, 0x47	; 71
 1da:	01 97       	sbiw	r24, 0x01	; 1
 1dc:	f1 f7       	brne	.-4      	; 0x1da <init_LCD+0xa8>
 1de:	00 c0       	rjmp	.+0      	; 0x1e0 <init_LCD+0xae>
 1e0:	00 00       	nop
	_delay_ms(10);
	
}
 1e2:	28 96       	adiw	r28, 0x08	; 8
 1e4:	0f b6       	in	r0, 0x3f	; 63
 1e6:	f8 94       	cli
 1e8:	de bf       	out	0x3e, r29	; 62
 1ea:	0f be       	out	0x3f, r0	; 63
 1ec:	cd bf       	out	0x3d, r28	; 61
 1ee:	df 91       	pop	r29
 1f0:	cf 91       	pop	r28
 1f2:	1f 91       	pop	r17
 1f4:	08 95       	ret

000001f6 <print_time>:


void print_time(const unsigned char *pTime){
 1f6:	cf 93       	push	r28
 1f8:	df 93       	push	r29
 1fa:	ec 01       	movw	r28, r24
	command_LCD(SET_DDRAM_ADDR);
 1fc:	80 e8       	ldi	r24, 0x80	; 128
 1fe:	7d df       	rcall	.-262    	; 0xfa <command_LCD>
 200:	8f ef       	ldi	r24, 0xFF	; 255
 202:	97 e4       	ldi	r25, 0x47	; 71
 204:	01 97       	sbiw	r24, 0x01	; 1
 206:	f1 f7       	brne	.-4      	; 0x204 <print_time+0xe>
 208:	00 c0       	rjmp	.+0      	; 0x20a <print_time+0x14>
 20a:	00 00       	nop
	_delay_ms(10);
	
	// hours
	data_LCD(pTime[0]);
 20c:	88 81       	ld	r24, Y
 20e:	5c df       	rcall	.-328    	; 0xc8 <data_LCD>
 210:	8f ef       	ldi	r24, 0xFF	; 255
 212:	97 e4       	ldi	r25, 0x47	; 71
 214:	01 97       	sbiw	r24, 0x01	; 1
 216:	f1 f7       	brne	.-4      	; 0x214 <print_time+0x1e>
 218:	00 c0       	rjmp	.+0      	; 0x21a <print_time+0x24>
	_delay_ms(10);
	data_LCD(pTime[1]);
 21a:	00 00       	nop
 21c:	89 81       	ldd	r24, Y+1	; 0x01
 21e:	54 df       	rcall	.-344    	; 0xc8 <data_LCD>
 220:	8f ef       	ldi	r24, 0xFF	; 255
 222:	97 e4       	ldi	r25, 0x47	; 71
 224:	01 97       	sbiw	r24, 0x01	; 1
 226:	f1 f7       	brne	.-4      	; 0x224 <print_time+0x2e>
 228:	00 c0       	rjmp	.+0      	; 0x22a <print_time+0x34>
	_delay_ms(10);
	data_LCD(':');
 22a:	00 00       	nop
 22c:	8a e3       	ldi	r24, 0x3A	; 58
 22e:	4c df       	rcall	.-360    	; 0xc8 <data_LCD>
 230:	8f ef       	ldi	r24, 0xFF	; 255
 232:	97 e4       	ldi	r25, 0x47	; 71
 234:	01 97       	sbiw	r24, 0x01	; 1
 236:	f1 f7       	brne	.-4      	; 0x234 <print_time+0x3e>
 238:	00 c0       	rjmp	.+0      	; 0x23a <print_time+0x44>
	_delay_ms(10);	
	
	//minutes
	data_LCD(pTime[2]);
 23a:	00 00       	nop
 23c:	8a 81       	ldd	r24, Y+2	; 0x02
 23e:	44 df       	rcall	.-376    	; 0xc8 <data_LCD>
 240:	8f ef       	ldi	r24, 0xFF	; 255
 242:	97 e4       	ldi	r25, 0x47	; 71
 244:	01 97       	sbiw	r24, 0x01	; 1
 246:	f1 f7       	brne	.-4      	; 0x244 <print_time+0x4e>
 248:	00 c0       	rjmp	.+0      	; 0x24a <print_time+0x54>
	_delay_ms(10);
	data_LCD(pTime[3]);
 24a:	00 00       	nop
 24c:	8b 81       	ldd	r24, Y+3	; 0x03
 24e:	3c df       	rcall	.-392    	; 0xc8 <data_LCD>
 250:	8f ef       	ldi	r24, 0xFF	; 255
 252:	97 e4       	ldi	r25, 0x47	; 71
 254:	01 97       	sbiw	r24, 0x01	; 1
 256:	f1 f7       	brne	.-4      	; 0x254 <print_time+0x5e>
 258:	00 c0       	rjmp	.+0      	; 0x25a <print_time+0x64>
	_delay_ms(10);
	data_LCD(':');
 25a:	00 00       	nop
 25c:	8a e3       	ldi	r24, 0x3A	; 58
 25e:	34 df       	rcall	.-408    	; 0xc8 <data_LCD>
 260:	8f ef       	ldi	r24, 0xFF	; 255
 262:	97 e4       	ldi	r25, 0x47	; 71
 264:	01 97       	sbiw	r24, 0x01	; 1
 266:	f1 f7       	brne	.-4      	; 0x264 <print_time+0x6e>
 268:	00 c0       	rjmp	.+0      	; 0x26a <print_time+0x74>
	_delay_ms(10);
	
	//seconds
	data_LCD(pTime[4]);
 26a:	00 00       	nop
 26c:	8c 81       	ldd	r24, Y+4	; 0x04
 26e:	2c df       	rcall	.-424    	; 0xc8 <data_LCD>
 270:	8f ef       	ldi	r24, 0xFF	; 255
 272:	97 e4       	ldi	r25, 0x47	; 71
 274:	01 97       	sbiw	r24, 0x01	; 1
 276:	f1 f7       	brne	.-4      	; 0x274 <print_time+0x7e>
 278:	00 c0       	rjmp	.+0      	; 0x27a <print_time+0x84>
	_delay_ms(10);
	data_LCD(pTime[5]);
 27a:	00 00       	nop
 27c:	8d 81       	ldd	r24, Y+5	; 0x05
 27e:	24 df       	rcall	.-440    	; 0xc8 <data_LCD>
 280:	8f ef       	ldi	r24, 0xFF	; 255
 282:	97 e4       	ldi	r25, 0x47	; 71
 284:	01 97       	sbiw	r24, 0x01	; 1
 286:	f1 f7       	brne	.-4      	; 0x284 <print_time+0x8e>
 288:	00 c0       	rjmp	.+0      	; 0x28a <print_time+0x94>
 28a:	00 00       	nop
	_delay_ms(10);
}
 28c:	df 91       	pop	r29
 28e:	cf 91       	pop	r28
 290:	08 95       	ret

00000292 <__vector_30>:
enum Time_is_ready{READY = 1, NOT_READY = 0};
volatile enum Time_is_ready update_time = NOT_READY;
//volatile bool set_connection = false;

ISR(USART1_RX_vect)
{
 292:	1f 92       	push	r1
 294:	0f 92       	push	r0
 296:	0f b6       	in	r0, 0x3f	; 63
 298:	0f 92       	push	r0
 29a:	11 24       	eor	r1, r1
 29c:	0b b6       	in	r0, 0x3b	; 59
 29e:	0f 92       	push	r0
 2a0:	2f 93       	push	r18
 2a2:	3f 93       	push	r19
 2a4:	4f 93       	push	r20
 2a6:	8f 93       	push	r24
 2a8:	9f 93       	push	r25
 2aa:	ef 93       	push	r30
 2ac:	ff 93       	push	r31
	static uint8_t time_index = 0;
	unsigned char uart_data = UDR1;
 2ae:	80 91 9c 00 	lds	r24, 0x009C	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
	
	if(uart_data != 0xFF)
 2b2:	8f 3f       	cpi	r24, 0xFF	; 255
 2b4:	e9 f0       	breq	.+58     	; 0x2f0 <__vector_30+0x5e>
	{
		time_str[time_index] = (uart_data >> 4) + 0x30;
 2b6:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <__data_end>
 2ba:	29 2f       	mov	r18, r25
 2bc:	30 e0       	ldi	r19, 0x00	; 0
 2be:	48 2f       	mov	r20, r24
 2c0:	42 95       	swap	r20
 2c2:	4f 70       	andi	r20, 0x0F	; 15
 2c4:	40 5d       	subi	r20, 0xD0	; 208
 2c6:	f9 01       	movw	r30, r18
 2c8:	e0 50       	subi	r30, 0x00	; 0
 2ca:	ff 4f       	sbci	r31, 0xFF	; 255
 2cc:	40 83       	st	Z, r20
		time_str[time_index + 1] = (uart_data & 0x0F) + 0x30;
 2ce:	8f 70       	andi	r24, 0x0F	; 15
 2d0:	80 5d       	subi	r24, 0xD0	; 208
 2d2:	f9 01       	movw	r30, r18
 2d4:	ef 5f       	subi	r30, 0xFF	; 255
 2d6:	fe 4f       	sbci	r31, 0xFE	; 254
 2d8:	80 83       	st	Z, r24
		
		if(time_index < 4)
 2da:	94 30       	cpi	r25, 0x04	; 4
 2dc:	20 f4       	brcc	.+8      	; 0x2e6 <__vector_30+0x54>
		{
			time_index +=2;
 2de:	9e 5f       	subi	r25, 0xFE	; 254
 2e0:	90 93 0e 01 	sts	0x010E, r25	; 0x80010e <__data_end>
 2e4:	05 c0       	rjmp	.+10     	; 0x2f0 <__vector_30+0x5e>
		}
		else
		{
			time_index = 0;
 2e6:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <__data_end>
			update_time = READY;
 2ea:	81 e0       	ldi	r24, 0x01	; 1
 2ec:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <update_time>
		{
			set_connection = true;
		}
	}*/
	
}
 2f0:	ff 91       	pop	r31
 2f2:	ef 91       	pop	r30
 2f4:	9f 91       	pop	r25
 2f6:	8f 91       	pop	r24
 2f8:	4f 91       	pop	r20
 2fa:	3f 91       	pop	r19
 2fc:	2f 91       	pop	r18
 2fe:	0f 90       	pop	r0
 300:	0b be       	out	0x3b, r0	; 59
 302:	0f 90       	pop	r0
 304:	0f be       	out	0x3f, r0	; 63
 306:	0f 90       	pop	r0
 308:	1f 90       	pop	r1
 30a:	18 95       	reti

0000030c <main>:

int main(void)
{
	
	init_LCD();
 30c:	12 df       	rcall	.-476    	; 0x132 <init_LCD>
	init_UART();
 30e:	0c d0       	rcall	.+24     	; 0x328 <init_UART>
	
	//enable global interrupt
	sei();
 310:	78 94       	sei
			UDR1 = AVR_CODE;
		}
	}
	*/
	//ready for receiving data
	send_CTS();
 312:	23 d0       	rcall	.+70     	; 0x35a <send_CTS>
 314:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <update_time>
	
    while (1) 
    {
		if(update_time)
 318:	88 23       	and	r24, r24
 31a:	e1 f3       	breq	.-8      	; 0x314 <main+0x8>
		{
			print_time(time_str);
 31c:	80 e0       	ldi	r24, 0x00	; 0
 31e:	91 e0       	ldi	r25, 0x01	; 1
 320:	6a df       	rcall	.-300    	; 0x1f6 <print_time>
 322:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <update_time>
			update_time = NOT_READY;
 326:	f6 cf       	rjmp	.-20     	; 0x314 <main+0x8>

00000328 <init_UART>:
 328:	10 92 98 00 	sts	0x0098, r1	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>

void init_UART()
{
	//set baud rate to 9600
	UBRR1H = 0x00;
	UBRR1L = 0x2F;
 32c:	8f e2       	ldi	r24, 0x2F	; 47
 32e:	80 93 99 00 	sts	0x0099, r24	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
	
	//disable double speed
	UCSR1A &= ~(1 << U2X1);
 332:	eb e9       	ldi	r30, 0x9B	; 155
 334:	f0 e0       	ldi	r31, 0x00	; 0
 336:	80 81       	ld	r24, Z
 338:	8d 7f       	andi	r24, 0xFD	; 253
 33a:	80 83       	st	Z, r24
	
	//frame size 8 bit, no parity mode, 1 stop bit, asynchronous mode
	UCSR1C = 0x00;
 33c:	ed e9       	ldi	r30, 0x9D	; 157
 33e:	f0 e0       	ldi	r31, 0x00	; 0
 340:	10 82       	st	Z, r1
	UCSR1C |= (1 << UCSZ11) | (1 << UCSZ10);
 342:	80 81       	ld	r24, Z
 344:	86 60       	ori	r24, 0x06	; 6
 346:	80 83       	st	Z, r24
	
	//set frame size 8 bit, enable receiver and transmitter, enable interrupt on RX1 flag
	UCSR1B |= (1 << RXCIE1) | (1 << TXEN1) | (1 << RXEN1);
 348:	ea e9       	ldi	r30, 0x9A	; 154
 34a:	f0 e0       	ldi	r31, 0x00	; 0
 34c:	80 81       	ld	r24, Z
 34e:	88 69       	ori	r24, 0x98	; 152
 350:	80 83       	st	Z, r24
	UCSR1B &= ~(1 << UCSZ12);
 352:	80 81       	ld	r24, Z
 354:	8b 7f       	andi	r24, 0xFB	; 251
 356:	80 83       	st	Z, r24
 358:	08 95       	ret

0000035a <send_CTS>:
}

void send_CTS()
{
	//using PD4 as output
	DDRD = 1 << DDRD4;
 35a:	80 e1       	ldi	r24, 0x10	; 16
 35c:	81 bb       	out	0x11, r24	; 17
	
	//send CTS signal
	
	PORTD |= (1 << PORTD4);
 35e:	82 b3       	in	r24, 0x12	; 18
 360:	80 61       	ori	r24, 0x10	; 16
 362:	82 bb       	out	0x12, r24	; 18
 364:	2f e3       	ldi	r18, 0x3F	; 63
 366:	8d e0       	ldi	r24, 0x0D	; 13
 368:	93 e0       	ldi	r25, 0x03	; 3
 36a:	21 50       	subi	r18, 0x01	; 1
 36c:	80 40       	sbci	r24, 0x00	; 0
 36e:	90 40       	sbci	r25, 0x00	; 0
 370:	e1 f7       	brne	.-8      	; 0x36a <send_CTS+0x10>
 372:	00 c0       	rjmp	.+0      	; 0x374 <send_CTS+0x1a>
 374:	00 00       	nop
	_delay_ms(1000);
	PORTD &= ~(1 << PORTD4);
 376:	82 b3       	in	r24, 0x12	; 18
 378:	8f 7e       	andi	r24, 0xEF	; 239
 37a:	82 bb       	out	0x12, r24	; 18
 37c:	08 95       	ret

0000037e <_exit>:
 37e:	f8 94       	cli

00000380 <__stop_program>:
 380:	ff cf       	rjmp	.-2      	; 0x380 <__stop_program>
